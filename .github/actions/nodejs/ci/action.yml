name: "Node.js CI"
description: "This action builds and tests a Node.js app"

inputs:
  node-version:
    description: 'The version of Node.js to use for building and testing.'
    required: false
    default: '16'
  node-cache:
    description: 'Package manager to use. Valid inputs: npm, yarn, pnpm.'
    default: "npm"
    required: false
  test-command:
    description: 'The custom command to run for testing the application.'
    required: false
    default: 'npm test'
  build-command:
    description: 'Command required to build the app'
    required: false
    default: 'npm run build'
  run-tests:
    description: 'Whether to run tests or not'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v3

    - name: Build and test
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}
        cache: ${{ inputs.node-cache }}
        cache-dependency-path: '**/package-lock.json'

    - name: Install dependencies
      shell: bash
      run: npm ci

    - name: Validate and run test commands
      shell: bash
      if: ${{ inputs.run-tests == 'true' }}
      run: |
        VALID_TEST_COMMANDS=""
        IFS="&&"
        read -ra COMMANDS <<< "${{ inputs.test-command }}"
        for CMD in "${COMMANDS[@]}"; do
          if [[ $CMD =~ ^(npm\ test|npm\ run)[[:space:]] ]]; then
            VALID_TEST_COMMANDS+=" && $CMD"
          else
            echo "Invalid test command: '$CMD'"
            exit 1
          fi
        done
        if [[ -n "$VALID_TEST_COMMANDS" ]]; then
          eval "$VALID_TEST_COMMANDS"
        else
          echo "No valid test commands provided."
          exit 1
        fi

    - name: Validate and run build commands
      shell: bash
      run: |
        VALID_BUILD_COMMANDS=""
        IFS="&&"
        read -ra COMMANDS <<< "${{ inputs.build-command }}"
        for CMD in "${COMMANDS[@]}"; do
          if [[ $CMD =~ ^(npm\ run)[[:space:]] ]]; then
            VALID_BUILD_COMMANDS+=" && $CMD"
          else
            echo "Invalid build command: '$CMD'"
            exit 1
          fi
        done
        if [[ -n "$VALID_BUILD_COMMANDS" ]]; then
          eval "$VALID_BUILD_COMMANDS"
        else
          echo "No valid build commands provided."
          exit 1
        fi